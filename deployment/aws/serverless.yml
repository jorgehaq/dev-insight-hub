service: devinsighthub

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    POSTGRES_HOST: ${self:custom.dbHost}
    POSTGRES_USER: ${self:custom.dbUser}
    POSTGRES_PASSWORD: ${self:custom.dbPassword}
    POSTGRES_DB: ${self:custom.dbName}
    MONGODB_URI: ${self:custom.mongoUri}
    SECRET_KEY: ${self:custom.secretKey}

custom:
  dbHost: 
    Ref: PostgresInstance
  dbUser: ${ssm:/devinsighthub/${self:provider.stage}/db/user~true}
  dbPassword: ${ssm:/devinsighthub/${self:provider.stage}/db/password~true}
  dbName: devinsighthub
  mongoUri: ${ssm:/devinsighthub/${self:provider.stage}/mongo/uri~true}
  secretKey: ${ssm:/devinsighthub/${self:provider.stage}/secret-key~true}
  pythonRequirements:
    dockerizePip: true
    slim: true

functions:
  api:
    handler: lambda.handler
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    # VPC for RDS
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: devinsighthub-vpc

    # Subnets for RDS
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: 
          Fn::Select:
            - 0
            - Fn::GetAZs: ""
        Tags:
          - Key: Name
            Value: devinsighthub-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: 
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
        Tags:
          - Key: Name
            Value: devinsighthub-private-subnet-2

    # Security group for RDS
    PostgresSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow database connections
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    # RDS Subnet Group
    RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Postgres
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2

    # RDS Instance
    PostgresInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        DBName: ${self:custom.dbName}
        MasterUsername: ${self:custom.dbUser}
        MasterUserPassword: ${self:custom.dbPassword}
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        VPCSecurityGroups:
          - Fn::GetAtt:
            - PostgresSecurityGroup
            - GroupId
        DBSubnetGroupName:
          Ref: RDSSubnetGroup
        PubliclyAccessible: true

    # DynamoDB Table for storing analysis results
    AnalysisTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-analysis-results
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: repositoryId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: repositoryId-index
            KeySchema:
              - AttributeName: repositoryId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # S3 Bucket for storing code and artifacts
    CodeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-devinsighthub-code
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000